import { useEffect, useMemo, useState } from 'react';import { AnimatePresence, motion } from 'framer-motion';import {  PlusIcon,  PencilIcon,  TrashIcon,  ArrowPathIcon,  CheckIcon,  XMarkIcon,} from '@heroicons/react/24/outline';import type {  PortfolioData,  PortfolioEducation,  PortfolioExperience,  PortfolioMissionStat,  PortfolioProject,  PortfolioSkillItem,  PortfolioSpaceHighlight,} from '../types/portfolio';const ADMIN_USERNAME = 'admin';const ADMIN_PASSWORD = 'admin';const createId = (prefix: string) => {  const globalCrypto = typeof globalThis !== 'undefined' ? (globalThis.crypto as Crypto | undefined) : undefined;  if (globalCrypto && typeof globalCrypto.randomUUID === 'function') {    return `${prefix}-${globalCrypto.randomUUID()}`;  }  return `${prefix}-${Date.now()}`;};const SECTION_TABS = [  { id: 'profile', label: 'Profile' },  { id: 'skills', label: 'Skills' },  { id: 'experiences', label: 'Experiences' },  { id: 'education', label: 'Education' },  { id: 'projects', label: 'Projects' },  { id: 'mission_stats', label: 'Mission Stats' },  { id: 'space_highlights', label: 'Highlights' },] as const;type AdminSection = (typeof SECTION_TABS)[number]['id'];type FormContext = {  section: AdminSection;  id?: string;};const DEFAULT_FORM_DATA: Record<AdminSection, Record<string, unknown>> = {  profile: {},  skills: {},  experiences: {    role: '',    company: '',    duration: '',    description: '',    technologies: '',    order_index: 0,    logo_url: '',  },  education: {    school_name: '',    degree: '',    duration: '',    description: '',    type: 'education',    order_index: 0,    logo_url: '',  },  projects: {    title: '',    description: '',    technologies: '',    live_url: '',    github_url: '',    image_url: '',    featured: false,    order_index: 0,  },  mission_stats: {    label: '',    value: '',    description: '',  },  space_highlights: {    title: '',    description: '',    badge: '',  },};const toCommaString = (value?: string[] | null) => (value && value.length ? value.join(', ') : '');const fromCommaString = (value?: string) =>  value    ? value        .split(',')        .map((item) => item.trim())        .filter(Boolean)    : [];const formVariants = {  hidden: { opacity: 0, y: 16 },  visible: { opacity: 1, y: 0, transition: { duration: 0.25 } },};const toastVariants = {  hidden: { opacity: 0, y: 16 },  visible: { opacity: 1, y: 0 },};const fetchPortfolio = async (): Promise<PortfolioData> => {  const response = await fetch('/admin/portfolio', { headers: { 'Cache-Control': 'no-cache' } });  if (!response.ok) {    const fallback = await fetch('/data/portfolio.json?ts=' + Date.now());    if (!fallback.ok) {      throw new Error('Failed to load portfolio data.');    }    return fallback.json();  }  return response.json();};const persistPortfolio = async (data: PortfolioData) => {  const response = await fetch('/admin/portfolio', {    method: 'POST',    headers: {      'Content-Type': 'application/json',    },    body: JSON.stringify(data, null, 2),  });  if (!response.ok) {    const text = await response.text();    throw new Error(text || 'Failed to save portfolio data.');  }};const SectionCard = ({  title,  description,  action,  children,}: {  title: string;  description?: string;  action?: React.ReactNode;  children: React.ReactNode;}) => (  <div className="rounded-3xl border border-white/10 bg-slate-900/60 p-6 shadow-[0_24px_48px_rgba(15,23,42,0.45)] backdrop-blur-2xl">    <div className="flex flex-col gap-4 sm:flex-row sm:items-start sm:justify-between">      <div className="space-y-2">        <h2 className="text-xl font-semibold text-white">{title}</h2>        {description ? <p className="text-sm text-indigo-100/70">{description}</p> : null}      </div>      {action}    </div>    <div className="mt-6 space-y-4">{children}</div>  </div>);const SectionNav = ({ active, onSelect }: { active: AdminSection; onSelect: (section: AdminSection) => void }) => (  <nav className="grid gap-2">    {SECTION_TABS.map((tab) => {      const isActive = tab.id === active;      return (        <motion.button          key={tab.id}          type="button"          onClick={() => onSelect(tab.id)}          className={`flex items-center justify-between rounded-2xl border px-4 py-3 text-sm font-semibold transition-all ${            isActive              ? 'border-indigo-400/60 bg-indigo-500/20 text-white shadow-[0_10px_30px_rgba(56,189,248,0.35)]'              : 'border-white/10 bg-white/5 text-indigo-100 hover:border-indigo-300/60 hover:bg-indigo-500/10'          }`}          whileHover={{ x: 4 }}        >          <span>{tab.label}</span>          {isActive ? <CheckIcon className="h-4 w-4 text-indigo-200" /> : null}        </motion.button>      );    })}  </nav>);const InlineInput = ({  label,  id,  value,  onChange,  type = 'text',  helper,}: {  label: string;  id: string;  value: string | number;  onChange: (value: string) => void;  type?: string;  helper?: string;}) => (  <label className="block space-y-2">    <span className="text-xs font-semibold uppercase tracking-[0.28em] text-indigo-200">{label}</span>    <input      id={id}      value={value}      onChange={(event) => onChange(event.target.value)}      type={type}      className="w-full rounded-xl border border-white/10 bg-white/5 px-4 py-3 text-sm text-white placeholder:text-indigo-100/40 focus:border-indigo-300/70 focus:outline-none focus:ring-2 focus:ring-indigo-400/40"    />    {helper ? <span className="block text-xs text-indigo-100/60">{helper}</span> : null}  </label>);const TextAreaField = ({  label,  id,  value,  onChange,  rows = 4,  helper,}: {  label: string;  id: string;  value: string;  onChange: (value: string) => void;  rows?: number;  helper?: string;}) => (  <label className="block space-y-2">    <span className="text-xs font-semibold uppercase tracking-[0.28em] text-indigo-200">{label}</span>    <textarea      id={id}      value={value}      onChange={(event) => onChange(event.target.value)}      rows={rows}      className="w-full rounded-xl border border-white/10 bg-white/5 px-4 py-3 text-sm text-white placeholder:text-indigo-100/40 focus:border-indigo-300/70 focus:outline-none focus:ring-2 focus:ring-indigo-400/40"    />    {helper ? <span className="block text-xs text-indigo-100/60">{helper}</span> : null}  </label>);const SelectField = ({  label,  id,  value,  onChange,  options,  helper,}: {  label: string;  id: string;  value: string;  onChange: (value: string) => void;  options: { label: string; value: string }[];  helper?: string;}) => (  <label className="block space-y-2">    <span className="text-xs font-semibold uppercase tracking-[0.28em] text-indigo-200">{label}</span>    <select      id={id}      value={value}      onChange={(event) => onChange(event.target.value)}      className="w-full rounded-xl border border-white/10 bg-white/5 px-4 py-3 text-sm text-white focus:border-indigo-300/70 focus:outline-none focus:ring-2 focus:ring-indigo-400/40"    >      {options.map((option) => (        <option key={option.value} value={option.value} className="bg-slate-900 text-white">          {option.label}        </option>      ))}    </select>    {helper ? <span className="block text-xs text-indigo-100/60">{helper}</span> : null}  </label>);const CheckboxField = ({  label,  id,  checked,  onChange,  helper,}: {  label: string;  id: string;  checked: boolean;  onChange: (checked: boolean) => void;  helper?: string;}) => (  <label    htmlFor={id}    className="flex items-start gap-3 rounded-2xl border border-white/10 bg-white/5 px-4 py-3 text-left"  >    <input      id={id}      type="checkbox"      checked={checked}      onChange={(event) => onChange(event.target.checked)}      className="mt-1 h-4 w-4 rounded border-white/20 bg-white/10 text-indigo-500 focus:ring-indigo-400/60"    />    <div className="space-y-1">      <span className="text-sm font-semibold text-white">{label}</span>      {helper ? <p className="text-xs text-indigo-100/70">{helper}</p> : null}    </div>  </label>);export const AdminPage = () => {  const [isAuthenticated, setIsAuthenticated] = useState(false);  const [username, setUsername] = useState(ADMIN_USERNAME);  const [password, setPassword] = useState(ADMIN_PASSWORD);  const [portfolio, setPortfolio] = useState<PortfolioData | null>(null);  const [selectedSection, setSelectedSection] = useState<AdminSection>('profile');  const [isLoading, setIsLoading] = useState(false);  const [isSaving, setIsSaving] = useState(false);  const [errorMessage, setErrorMessage] = useState<string | null>(null);  const [toastMessage, setToastMessage] = useState<string | null>(null);  const [isModalOpen, setIsModalOpen] = useState(false);  const [formContext, setFormContext] = useState<FormContext | null>(null);  const [formData, setFormData] = useState<Record<string, any>>({});  useEffect(() => {    const storedAuth = localStorage.getItem('nebula-admin-auth');    if (storedAuth === 'true') {      setIsAuthenticated(true);      void loadPortfolio();    }  }, []);  useEffect(() => {    if (!toastMessage) return;    const timer = setTimeout(() => setToastMessage(null), 2800);    return () => clearTimeout(timer);  }, [toastMessage]);  const loadPortfolio = async () => {    try {      setIsLoading(true);      const data = await fetchPortfolio();      setPortfolio(data);      setErrorMessage(null);    } catch (error) {      if (error instanceof Error) {        setErrorMessage(error.message);      } else {        setErrorMessage('Failed to load portfolio data.');      }    } finally {      setIsLoading(false);    }  };  const handleLogin = async (event: React.FormEvent) => {    event.preventDefault();    if (username === ADMIN_USERNAME && password === ADMIN_PASSWORD) {      setIsAuthenticated(true);      localStorage.setItem('nebula-admin-auth', 'true');      await loadPortfolio();    } else {      setErrorMessage('Invalid credentials. Try admin / admin.');    }  };  const handleLogout = () => {    setIsAuthenticated(false);    setPortfolio(null);    localStorage.removeItem('nebula-admin-auth');  };  const handleOpenModal = (section: AdminSection, item?: any) => {    setFormContext({ section, id: item?.id });    const defaults = DEFAULT_FORM_DATA[section] ?? {};    const base = {      ...defaults,      ...item,    };    if (section === 'experiences' || section === 'projects') {      base.technologies = toCommaString(item?.technologies);    }    if (section === 'skills' && portfolio?.skills) {      base.title = portfolio.skills.title;      base.description = portfolio.skills.description;      base.items = (portfolio.skills.items ?? []).map((skill) => ({ ...skill }));    }    if (section === 'profile' && portfolio?.profile) {      Object.assign(base, portfolio.profile, {        headline_words: (portfolio.profile.headline_words ?? []).join(', '),      });    }    setFormData(base);    setIsModalOpen(true);  };  const closeModal = () => {    setIsModalOpen(false);    setFormContext(null);    setFormData({});  };  const saveChanges = async (updated: PortfolioData) => {    try {      setIsSaving(true);      await persistPortfolio(updated);      setPortfolio(updated);      setToastMessage('Changes saved successfully.');      setErrorMessage(null);    } catch (error) {      if (error instanceof Error) {        setErrorMessage(error.message);      } else {        setErrorMessage('Failed to save changes.');      }    } finally {      setIsSaving(false);    }  };  const handleFormSubmit = async (event: React.FormEvent) => {    event.preventDefault();    if (!portfolio || !formContext) return;    const section = formContext.section;    const existingId = formContext.id;    const id = existingId ?? createId(section.slice(0, 3));    let updatedPortfolio: PortfolioData = { ...portfolio };    if (section === 'profile') {      updatedPortfolio = {        ...portfolio,        profile: {          ...portfolio.profile,          ...formData,          headline_words: fromCommaString(formData.headline_words as string),        },      };    }    if (section === 'skills') {      const rawItems = (formData.items as PortfolioSkillItem[] | undefined) ?? portfolio.skills.items ?? [];      const items = rawItems        .map((item) => ({          ...item,          id: item?.id ?? createId('skill'),          name: (item?.name ?? '').trim(),        }))        .filter((item) => item.name.length > 0);      updatedPortfolio = {        ...portfolio,        skills: {          title: (formData.title as string) ?? portfolio.skills.title,          description: (formData.description as string) ?? portfolio.skills.description,          items,        },      };    }    if (section === 'education') {      const mapped: PortfolioEducation = {        id,        school_name: formData.school_name as string,        degree: formData.degree as string,        duration: formData.duration as string,        description: formData.description as string,        type: (formData.type as 'education' | 'certification') ?? 'education',        order_index: Number(formData.order_index ?? 0),        logo_url: (formData.logo_url as string) || null,      };      const education = existingId        ? portfolio.education.map((item) => (item.id === existingId ? mapped : item))        : [...portfolio.education, mapped];      updatedPortfolio = { ...portfolio, education };    }    if (section === 'projects') {      const mapped: PortfolioProject = {        id,        title: formData.title as string,        description: formData.description as string,        technologies: fromCommaString(formData.technologies as string),        live_url: (formData.live_url as string) || null,        github_url: (formData.github_url as string) || null,        image_url: (formData.image_url as string) || null,        featured: Boolean(formData.featured),        order_index: Number(formData.order_index ?? 0),      };      const projects = existingId        ? portfolio.projects.map((item) => (item.id === existingId ? mapped : item))        : [...portfolio.projects, mapped];      updatedPortfolio = { ...portfolio, projects };    }    if (section === 'mission_stats') {      const mapped: PortfolioMissionStat = {        id,        label: formData.label as string,        value: formData.value as string,        description: (formData.description as string) || '',      };      const mission_stats = existingId        ? (portfolio.mission_stats ?? []).map((item) => (item.id === existingId ? mapped : item))        : [...(portfolio.mission_stats ?? []), mapped];      updatedPortfolio = { ...portfolio, mission_stats };    }    if (section === 'space_highlights') {      const mapped: PortfolioSpaceHighlight = {        id,        title: formData.title as string,        description: (formData.description as string) || '',        badge: (formData.badge as string) || null,      };      const space_highlights = existingId        ? (portfolio.space_highlights ?? []).map((item) => (item.id === existingId ? mapped : item))        : [...(portfolio.space_highlights ?? []), mapped];      updatedPortfolio = { ...portfolio, space_highlights };    }    await saveChanges(updatedPortfolio);    closeModal();  };  const handleDelete = async (section: AdminSection, id: string) => {    if (!portfolio) return;    const confirmed = window.confirm('Delete this entry? This cannot be undone.');    if (!confirmed) return;    let updatedPortfolio: PortfolioData = { ...portfolio };    if (section === 'experiences') {      updatedPortfolio = {        ...portfolio,        experiences: portfolio.experiences.filter((item) => item.id !== id),      };    }    if (section === 'education') {      updatedPortfolio = {        ...portfolio,        education: portfolio.education.filter((item) => item.id !== id),      };    }    if (section === 'projects') {      updatedPortfolio = {        ...portfolio,        projects: portfolio.projects.filter((item) => item.id !== id),      };    }    if (section === 'mission_stats') {      updatedPortfolio = {        ...portfolio,        mission_stats: (portfolio.mission_stats ?? []).filter((item) => item.id !== id),      };    }    if (section === 'space_highlights') {      updatedPortfolio = {        ...portfolio,        space_highlights: (portfolio.space_highlights ?? []).filter((item) => item.id !== id),      };    }    await saveChanges(updatedPortfolio);  };  const renderProfileSection = () => {    if (!portfolio) return null;    const profile = portfolio.profile;    return (      <SectionCard        title="Profile"        description="Update hero identity, contact and background visuals."        action={          <motion.button            type="button"            className="inline-flex items-center gap-2 rounded-xl border border-indigo-400/50 bg-indigo-500/10 px-4 py-2 text-sm font-semibold text-indigo-100 transition hover:bg-indigo-500/20"            whileHover={{ scale: 1.03 }}            onClick={() => handleOpenModal('profile', profile)}          >            <PencilIcon className="h-4 w-4" />            Edit Profile          </motion.button>        }      >        <dl className="grid gap-3 text-sm text-indigo-100/80">          <div className="flex flex-wrap items-center gap-2">            <dt className="font-semibold text-indigo-200">Name:</dt>            <dd>{profile.name}</dd>          </div>          <div className="flex flex-wrap items-center gap-2">            <dt className="font-semibold text-indigo-200">Title:</dt>            <dd>{profile.title}</dd>          </div>          <div className="flex flex-wrap items-center gap-2">            <dt className="font-semibold text-indigo-200">Email:</dt>            <dd>{profile.email}</dd>          </div>          <div className="flex flex-wrap items-center gap-2">            <dt className="font-semibold text-indigo-200">Location:</dt>            <dd>{profile.location}</dd>          </div>          <div className="flex flex-wrap gap-2">            <dt className="font-semibold text-indigo-200">Headline words:</dt>            <dd className="flex flex-wrap gap-2">              {(profile.headline_words ?? []).map((word) => (                <span key={word} className="rounded-full border border-indigo-300/60 bg-indigo-500/10 px-3 py-1 text-xs font-semibold">                  {word}                </span>              ))}            </dd>          </div>          {profile.about_background_url ? (            <div className="flex flex-wrap items-center gap-2">              <dt className="font-semibold text-indigo-200">Background image:</dt>              <dd className="truncate text-indigo-100/70">{profile.about_background_url}</dd>            </div>          ) : null}        </dl>      </SectionCard>    );  };  const renderSkillsSection = () => {    if (!portfolio) return null;    const skills = portfolio.skills;    return (      <SectionCard        title="Skills"        description="Adjust the skillset signal and add/remove capability badges."        action={          <motion.button            type="button"            className="inline-flex items-center gap-2 rounded-xl border border-indigo-400/50 bg-indigo-500/10 px-4 py-2 text-sm font-semibold text-indigo-100 transition hover:bg-indigo-500/20"            whileHover={{ scale: 1.03 }}            onClick={() => handleOpenModal('skills', skills)}          >            <PencilIcon className="h-4 w-4" />            Edit Skills          </motion.button>        }      >        <div className="space-y-4">          <div>            <h3 className="text-lg font-semibold text-white">{skills.title}</h3>            <p className="text-sm text-indigo-100/70">{skills.description}</p>          </div>          <div className="flex flex-wrap gap-2">            {(skills.items ?? []).map((skill) => (              <span                key={skill.id ?? skill.name}                className="inline-flex items-center gap-2 rounded-full border border-white/15 bg-white/10 px-3 py-1 text-xs font-semibold uppercase tracking-[0.35em] text-indigo-100"              >                {skill.name}              </span>            ))}          </div>        </div>      </SectionCard>    );  };  const renderTimeline = <Item extends { id?: string | null; order_index?: number | null }>(    title: string,    section: AdminSection,    items: Item[],    renderItem: (item: Item) => React.ReactNode,  ) => (    <SectionCard      title={title}      description="Maintain the ordering of your history by adjusting the order index."      action={        <motion.button          type="button"          onClick={() => handleOpenModal(section)}          className="inline-flex items-center gap-2 rounded-xl border border-indigo-400/50 bg-indigo-500/10 px-4 py-2 text-sm font-semibold text-indigo-100 transition hover:bg-indigo-500/20"          whileHover={{ scale: 1.03 }}        >          <PlusIcon className="h-4 w-4" />          Add {title.slice(0, -1)}        </motion.button>      }    >      <div className="grid gap-4">        {items          .slice()          .sort((a, b) => (a.order_index ?? 0) - (b.order_index ?? 0))          .map((item) => (            <motion.div              key={(item as any).id}              className="rounded-2xl border border-white/10 bg-white/5 p-5 backdrop-blur-xl"              whileHover={{ y: -2 }}            >              <div className="flex flex-col gap-4 sm:flex-row sm:items-start sm:justify-between">                <div className="space-y-2 text-sm text-indigo-100/80">{renderItem(item)}</div>                <div className="flex gap-2">                  <motion.button                    type="button"                    className="inline-flex items-center gap-2 rounded-xl border border-white/15 bg-white/10 px-3 py-2 text-xs font-semibold uppercase tracking-[0.2em] text-indigo-100 transition hover:bg-white/20"                    whileHover={{ scale: 1.03 }}                    onClick={() => handleOpenModal(section, item)}                  >                    <PencilIcon className="h-4 w-4" />                    Edit                  </motion.button>                  <motion.button                    type="button"                    className="inline-flex items-center gap-2 rounded-xl border border-red-500/40 bg-red-500/10 px-3 py-2 text-xs font-semibold uppercase tracking-[0.2em] text-red-200 transition hover:bg-red-500/20"                    whileHover={{ scale: 1.03 }}                    onClick={() => handleDelete(section, (item as any).id as string)}                  >                    <TrashIcon className="h-4 w-4" />                    Delete                  </motion.button>                </div>              </div>            </motion.div>          ))}      </div>    </SectionCard>  );  const renderMissionStats = () => (    <SectionCard      title="Mission Stats"      description="Numbers surfaced on the hero constellation."      action={        <motion.button          type="button"          onClick={() => handleOpenModal('mission_stats')}          className="inline-flex items-center gap-2 rounded-xl border border-indigo-400/50 bg-indigo-500/10 px-4 py-2 text-sm font-semibold text-indigo-100 transition hover:bg-indigo-500/20"          whileHover={{ scale: 1.03 }}        >          <PlusIcon className="h-4 w-4" />          Add stat        </motion.button>      }    >      <div className="grid gap-4">        {(portfolio?.mission_stats ?? []).map((stat) => (          <motion.div            key={stat.id}            className="flex items-center justify-between rounded-2xl border border-white/10 bg-white/5 px-5 py-4 text-sm text-indigo-100/80"            whileHover={{ y: -2 }}          >            <div>              <p className="text-lg font-semibold text-white">{stat.value}</p>              <p className="font-semibold uppercase tracking-[0.25em] text-indigo-200">{stat.label}</p>              {stat.description ? <p className="text-xs text-indigo-100/70">{stat.description}</p> : null}            </div>            <div className="flex gap-2">              <motion.button                type="button"                className="inline-flex items-center gap-2 rounded-xl border border-white/15 bg-white/10 px-3 py-2 text-xs font-semibold uppercase tracking-[0.2em] text-indigo-100 transition hover:bg-white/20"                whileHover={{ scale: 1.03 }}                onClick={() => handleOpenModal('mission_stats', stat)}              >                <PencilIcon className="h-4 w-4" />                Edit              </motion.button>              <motion.button                type="button"                className="inline-flex items-center gap-2 rounded-xl border border-red-500/40 bg-red-500/10 px-3 py-2 text-xs font-semibold uppercase tracking-[0.2em] text-red-200 transition hover:bg-red-500/20"                whileHover={{ scale: 1.03 }}                onClick={() => handleDelete('mission_stats', stat.id ?? '')}              >                <TrashIcon className="h-4 w-4" />                Delete              </motion.button>            </div>          </motion.div>        ))}      </div>    </SectionCard>  );  const renderHighlights = () => (    <SectionCard      title="Space Highlights"      description="Cards orbiting the hero 3D showcase."      action={        <motion.button          type="button"          onClick={() => handleOpenModal('space_highlights')}          className="inline-flex items-center gap-2 rounded-xl border border-indigo-400/50 bg-indigo-500/10 px-4 py-2 text-sm font-semibold text-indigo-100 transition hover:bg-indigo-500/20"          whileHover={{ scale: 1.03 }}        >          <PlusIcon className="h-4 w-4" />          Add highlight        </motion.button>      }    >      <div className="grid gap-4">        {(portfolio?.space_highlights ?? []).map((highlight) => (          <motion.div            key={highlight.id}            className="rounded-2xl border border-white/10 bg-white/5 p-5 backdrop-blur-xl"            whileHover={{ y: -2 }}          >            <div className="flex flex-col gap-3 text-sm text-indigo-100/80">              <div className="flex items-center gap-2">                <span className="inline-flex h-2 w-2 rounded-full bg-indigo-400" />                <span className="text-base font-semibold text-white">{highlight.title}</span>              </div>              {highlight.badge ? (                <span className="self-start rounded-full border border-indigo-400/40 bg-indigo-500/15 px-3 py-1 text-[0.65rem] font-semibold uppercase tracking-[0.35em] text-indigo-200">                  {highlight.badge}                </span>              ) : null}              {highlight.description ? <p>{highlight.description}</p> : null}            </div>            <div className="mt-4 flex gap-2">              <motion.button                type="button"                className="inline-flex items-center gap-2 rounded-xl border border-white/15 bg-white/10 px-3 py-2 text-xs font-semibold uppercase tracking-[0.2em] text-indigo-100 transition hover:bg-white/20"                whileHover={{ scale: 1.03 }}                onClick={() => handleOpenModal('space_highlights', highlight)}              >                <PencilIcon className="h-4 w-4" />                Edit              </motion.button>              <motion.button                type="button"                className="inline-flex items-center gap-2 rounded-xl border border-red-500/40 bg-red-500/10 px-3 py-2 text-xs font-semibold uppercase tracking-[0.2em] text-red-200 transition hover:bg-red-500/20"                whileHover={{ scale: 1.03 }}                onClick={() => handleDelete('space_highlights', highlight.id ?? '')}              >                <TrashIcon className="h-4 w-4" />                Delete              </motion.button>            </div>          </motion.div>        ))}      </div>    </SectionCard>  );  const renderSection = () => {    switch (selectedSection) {      case 'profile':        return renderProfileSection();      case 'skills':        return renderSkillsSection();      case 'experiences':        return renderTimeline(          'Experiences',          'experiences',          portfolio?.experiences ?? [],          (item) => (            <>              <p className="text-lg font-semibold text-white">{(item as PortfolioExperience).role}</p>              <p className="text-sm text-indigo-100/70">{(item as PortfolioExperience).company}</p>              <p className="text-xs uppercase tracking-[0.3em] text-indigo-200">{(item as PortfolioExperience).duration}</p>              {(item as PortfolioExperience).technologies?.length ? (                <div className="mt-2 flex flex-wrap gap-2">                  {(item as PortfolioExperience).technologies.map((tech) => (                    <span                      key={tech}                      className="rounded-full border border-indigo-400/30 bg-indigo-500/10 px-3 py-1 text-[0.65rem] font-semibold uppercase tracking-[0.35em] text-indigo-100"                    >                      {tech}                    </span>                  ))}                </div>              ) : null}            </>          ),        );      case 'education':        return renderTimeline(          'Education',          'education',          portfolio?.education ?? [],          (item) => (            <>              <p className="text-lg font-semibold text-white">{(item as PortfolioEducation).degree}</p>              <p className="text-sm text-indigo-100/70">{(item as PortfolioEducation).school_name}</p>              <p className="text-xs uppercase tracking-[0.3em] text-indigo-200">{(item as PortfolioEducation).duration}</p>              <p className="text-xs text-indigo-100/70">{(item as PortfolioEducation).description}</p>            </>          ),        );      case 'projects':        return renderTimeline(          'Projects',          'projects',          portfolio?.projects ?? [],          (item) => (            <>              <p className="text-lg font-semibold text-white">{(item as PortfolioProject).title}</p>              <p className="text-sm text-indigo-100/70">{(item as PortfolioProject).description}</p>              {(item as PortfolioProject).technologies?.length ? (                <div className="mt-2 flex flex-wrap gap-2">                  {(item as PortfolioProject).technologies.map((tech) => (                    <span                      key={tech}                      className="rounded-full border border-white/15 bg-white/10 px-3 py-1 text-[0.65rem] font-semibold uppercase tracking-[0.35em] text-indigo-100"                    >                      {tech}                    </span>                  ))}                </div>              ) : null}              <div className="mt-2 flex flex-wrap gap-4 text-xs text-indigo-100/60">                {(item as PortfolioProject).live_url ? <span>Live: {(item as PortfolioProject).live_url}</span> : null}                {(item as PortfolioProject).github_url ? <span>Repo: {(item as PortfolioProject).github_url}</span> : null}              </div>            </>          ),        );      case 'mission_stats':        return renderMissionStats();      case 'space_highlights':        return renderHighlights();      default:        return null;    }  };const Spinner = () => (  <span className="inline-flex h-5 w-5 animate-spin items-center justify-center rounded-full border-2 border-indigo-200 border-t-transparent" />);const modalTitle = useMemo(() => {  if (!formContext) return '';  const tab = SECTION_TABS.find((item) => item.id === formContext.section);  if (!tab) return '';  const action = formContext.id ? 'Edit' : 'Add';  const label = action === 'Add' && tab.label.endsWith('s') ? tab.label.slice(0, -1) : tab.label;  return `${action} ${label}`;}, [formContext]);const handleFormInput = (key: string, value: any) => {  setFormData((prev) => ({    ...prev,    [key]: value,  }));};const handleCheckboxInput = (key: string, checked: boolean) => {  setFormData((prev) => ({    ...prev,    [key]: checked,  }));};const handleSkillItemChange = (index: number, value: string) => {  setFormData((prev) => {    const items = Array.isArray(prev.items) ? [...(prev.items as PortfolioSkillItem[])] : [];    if (items[index]) {      items[index] = { ...items[index], name: value };    } else {      items[index] = { id: createId('skill'), name: value };    }    return { ...prev, items };  });};const addSkillItem = () => {  setFormData((prev) => {    const items = Array.isArray(prev.items) ? [...(prev.items as PortfolioSkillItem[])] : [];    items.push({ id: createId('skill'), name: '' });    return { ...prev, items };  });};const removeSkillItem = (index: number) => {  setFormData((prev) => {    const items = Array.isArray(prev.items) ? [...(prev.items as PortfolioSkillItem[])] : [];    if (index >= 0 && index < items.length) {      items.splice(index, 1);    }    return { ...prev, items };  });};const renderModalContent = () => {  if (!formContext) return null;  const section = formContext.section;  const isEditing = Boolean(formContext.id);  const skillItems = Array.isArray(formData.items) ? (formData.items as PortfolioSkillItem[]) : [];  const actionLabel = isEditing ? 'Save changes' : 'Save entry';  const profileFields = (    <div className="grid gap-5">      <div className="grid gap-4 sm:grid-cols-2">        <InlineInput          label="Name"          id="profile-name"          value={(formData.name as string) ?? ''}          onChange={(value) => handleFormInput('name', value)}        />        <InlineInput          label="Navigation label"          id="profile-nav"          value={(formData.nav_label as string) ?? ''}          onChange={(value) => handleFormInput('nav_label', value)}          helper="Shown on the top-left brand lockup."        />        <InlineInput          label="Title"          id="profile-title"          value={(formData.title as string) ?? ''}          onChange={(value) => handleFormInput('title', value)}        />        <InlineInput          label="Email"          id="profile-email"          value={(formData.email as string) ?? ''}          onChange={(value) => handleFormInput('email', value)}          type="email"        />        <InlineInput          label="Location"          id="profile-location"          value={(formData.location as string) ?? ''}          onChange={(value) => handleFormInput('location', value)}        />      </div>      <TextAreaField        label="Bio"        id="profile-bio"        value={(formData.bio as string) ?? ''}        onChange={(value) => handleFormInput('bio', value)}        rows={5}      />      <InlineInput        label="Headline words"        id="profile-headline"        value={(formData.headline_words as string) ?? ''}        onChange={(value) => handleFormInput('headline_words', value)}        helper="Comma-separated words powering the hero ticker."      />      <div className="grid gap-4 sm:grid-cols-2">        <InlineInput          label="Avatar URL"          id="profile-avatar"          value={(formData.avatar_url as string) ?? ''}          onChange={(value) => handleFormInput('avatar_url', value)}        />        <InlineInput          label="About background URL"          id="profile-background"          value={(formData.about_background_url as string) ?? ''}          onChange={(value) => handleFormInput('about_background_url', value)}          helper="Large backdrop shown in the About section."        />      </div>    </div>  );  const skillsFields = (    <div className="grid gap-5">      <InlineInput        label="Section title"        id="skills-title"        value={(formData.title as string) ?? ''}        onChange={(value) => handleFormInput('title', value)}      />      <TextAreaField        label="Description"        id="skills-description"        value={(formData.description as string) ?? ''}        onChange={(value) => handleFormInput('description', value)}        rows={4}      />      <div className="space-y-3 rounded-2xl border border-white/10 bg-white/5 p-4">        <p className="text-xs font-semibold uppercase tracking-[0.28em] text-indigo-200">Skill badges</p>        {skillItems.length === 0 ? (          <p className="text-sm text-indigo-100/60">No skills yet. Add a badge to get started.</p>        ) : (          skillItems.map((item, index) => (            <div              key={item.id ?? `skill-${index}`}              className="flex flex-col gap-3 rounded-xl border border-white/10 bg-slate-900/40 p-4 sm:flex-row sm:items-center sm:justify-between"            >              <input                value={item.name ?? ''}                onChange={(event) => handleSkillItemChange(index, event.target.value)}                placeholder="Mission systems architecture"                className="w-full rounded-lg border border-white/10 bg-white/5 px-4 py-2 text-sm text-white placeholder:text-indigo-100/40 focus:border-indigo-300/70 focus:outline-none focus:ring-2 focus:ring-indigo-400/40"              />              <motion.button                type="button"                className="inline-flex items-center gap-2 self-start rounded-lg border border-red-500/40 bg-red-500/10 px-3 py-2 text-xs font-semibold uppercase tracking-[0.25em] text-red-200 transition hover:bg-red-500/20 sm:self-center"                whileHover={{ scale: 1.02 }}                onClick={() => removeSkillItem(index)}              >                <TrashIcon className="h-4 w-4" />                Remove              </motion.button>            </div>          ))        )}        <motion.button          type="button"          onClick={addSkillItem}          className="inline-flex items-center gap-2 rounded-xl border border-indigo-400/50 bg-indigo-500/10 px-4 py-2 text-sm font-semibold text-indigo-100 transition hover:bg-indigo-500/20"          whileHover={{ scale: 1.03 }}        >          <PlusIcon className="h-4 w-4" />          Add skill badge        </motion.button>      </div>    </div>  );  const experienceFields = (    <div className="grid gap-5">      <div className="grid gap-4 sm:grid-cols-2">        <InlineInput          label="Role"          id="experience-role"          value={(formData.role as string) ?? ''}          onChange={(value) => handleFormInput('role', value)}        />        <InlineInput          label="Company"          id="experience-company"          value={(formData.company as string) ?? ''}          onChange={(value) => handleFormInput('company', value)}        />        <InlineInput          label="Duration"          id="experience-duration"          value={(formData.duration as string) ?? ''}          onChange={(value) => handleFormInput('duration', value)}        />        <InlineInput          label="Display order"          id="experience-order"          value={formData.order_index !== undefined && formData.order_index !== null ? String(formData.order_index) : ''}          onChange={(value) => handleFormInput('order_index', value)}          type="number"          helper="Lower numbers surface higher in the timeline."        />      </div>      <TextAreaField        label="Description"        id="experience-description"        value={(formData.description as string) ?? ''}        onChange={(value) => handleFormInput('description', value)}        rows={4}      />      <TextAreaField        label="Technologies"        id="experience-technologies"        value={(formData.technologies as string) ?? ''}        onChange={(value) => handleFormInput('technologies', value)}        rows={3}        helper="Comma-separated stack list."      />      <InlineInput        label="Logo URL"        id="experience-logo"        value={(formData.logo_url as string) ?? ''}        onChange={(value) => handleFormInput('logo_url', value)}      />    </div>  );  const educationFields = (    <div className="grid gap-5">      <div className="grid gap-4 sm:grid-cols-2">        <InlineInput          label="Degree / certification"          id="education-degree"          value={(formData.degree as string) ?? ''}          onChange={(value) => handleFormInput('degree', value)}        />        <InlineInput          label="Institution"          id="education-school"          value={(formData.school_name as string) ?? ''}          onChange={(value) => handleFormInput('school_name', value)}        />        <InlineInput          label="Duration"          id="education-duration"          value={(formData.duration as string) ?? ''}          onChange={(value) => handleFormInput('duration', value)}        />        <InlineInput          label="Display order"          id="education-order"          value={formData.order_index !== undefined && formData.order_index !== null ? String(formData.order_index) : ''}          onChange={(value) => handleFormInput('order_index', value)}          type="number"        />      </div>      <SelectField        label="Category"        id="education-type"        value={(formData.type as string) ?? 'education'}        onChange={(value) => handleFormInput('type', value)}        options={[{ label: 'Education', value: 'education' }, { label: 'Certification', value: 'certification' }]}      />      <TextAreaField        label="Description"        id="education-description"        value={(formData.description as string) ?? ''}        onChange={(value) => handleFormInput('description', value)}        rows={4}      />      <InlineInput        label="Logo URL"        id="education-logo"        value={(formData.logo_url as string) ?? ''}        onChange={(value) => handleFormInput('logo_url', value)}      />    </div>  );  const projectsFields = (    <div className="grid gap-5">      <div className="grid gap-4 sm:grid-cols-2">        <InlineInput          label="Title"          id="project-title"          value={(formData.title as string) ?? ''}          onChange={(value) => handleFormInput('title', value)}        />        <InlineInput          label="Display order"          id="project-order"          value={formData.order_index !== undefined && formData.order_index !== null ? String(formData.order_index) : ''}          onChange={(value) => handleFormInput('order_index', value)}          type="number"        />      </div>      <TextAreaField        label="Description"        id="project-description"        value={(formData.description as string) ?? ''}        onChange={(value) => handleFormInput('description', value)}        rows={4}      />      <TextAreaField        label="Technologies"        id="project-technologies"        value={(formData.technologies as string) ?? ''}        onChange={(value) => handleFormInput('technologies', value)}        rows={3}        helper="Comma-separated stack list."      />      <div className="grid gap-4 sm:grid-cols-2">        <InlineInput          label="Live URL"          id="project-live"          value={(formData.live_url as string) ?? ''}          onChange={(value) => handleFormInput('live_url', value)}        />        <InlineInput          label="GitHub URL"          id="project-github"          value={(formData.github_url as string) ?? ''}          onChange={(value) => handleFormInput('github_url', value)}        />      </div>      <InlineInput        label="Image URL"        id="project-image"        value={(formData.image_url as string) ?? ''}        onChange={(value) => handleFormInput('image_url', value)}      />      <CheckboxField        label="Feature this project"        id="project-featured"        checked={Boolean(formData.featured)}        onChange={(checked) => handleCheckboxInput('featured', checked)}        helper="Featured projects surface in the hero showcase."      />    </div>  );  const missionFields = (    <div className="grid gap-5">      <div className="grid gap-4 sm:grid-cols-2">        <InlineInput          label="Label"          id="mission-label"          value={(formData.label as string) ?? ''}          onChange={(value) => handleFormInput('label', value)}        />        <InlineInput          label="Value"          id="mission-value"          value={(formData.value as string) ?? ''}          onChange={(value) => handleFormInput('value', value)}        />      </div>      <TextAreaField        label="Description"        id="mission-description"        value={(formData.description as string) ?? ''}        onChange={(value) => handleFormInput('description', value)}        rows={3}      />    </div>  );  const highlightFields = (    <div className="grid gap-5">      <InlineInput        label="Title"        id="highlight-title"        value={(formData.title as string) ?? ''}        onChange={(value) => handleFormInput('title', value)}      />      <InlineInput        label="Badge"        id="highlight-badge"        value={(formData.badge as string) ?? ''}        onChange={(value) => handleFormInput('badge', value)}        helper="Optional label rendered above the card."      />      <TextAreaField        label="Description"        id="highlight-description"        value={(formData.description as string) ?? ''}        onChange={(value) => handleFormInput('description', value)}        rows={4}      />    </div>  );  let content: React.ReactNode = null;  switch (section) {    case 'profile':      content = profileFields;      break;    case 'skills':      content = skillsFields;      break;    case 'experiences':      content = experienceFields;      break;    case 'education':      content = educationFields;      break;    case 'projects':      content = projectsFields;      break;    case 'mission_stats':      content = missionFields;      break;    case 'space_highlights':      content = highlightFields;      break;    default:      break;  }  if (!content) return null;  const primaryButtonLabel = isSaving ? 'Saving...' : actionLabel;  return (    <form onSubmit={handleFormSubmit} className="grid gap-6">      {content}      <div className="flex flex-wrap items-center justify-end gap-3 pt-2">        <motion.button          type="button"          onClick={closeModal}          className="inline-flex items-center gap-2 rounded-xl border border-white/15 bg-white/10 px-4 py-2 text-sm font-semibold text-indigo-100 transition hover:bg-white/20"          whileHover={{ scale: 1.02 }}        >          Cancel        </motion.button>        <motion.button          type="submit"          disabled={isSaving}          className="inline-flex items-center gap-2 rounded-xl border border-indigo-400/60 bg-indigo-500/20 px-5 py-2 text-sm font-semibold text-white transition hover:bg-indigo-500/30 disabled:cursor-not-allowed disabled:opacity-60"          whileHover={{ scale: isSaving ? 1 : 1.02 }}        >          {primaryButtonLabel}        </motion.button>      </div>    </form>  );};  if (!isAuthenticated) {    return (      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-black to-red-900 flex items-center justify-center py-20">        <motion.div          className="bg-gradient-to-br from-gray-800/80 to-gray-900/80 backdrop-blur-sm border border-white/10 rounded-xl p-8 w-full max-w-md"          initial={{ opacity: 0, scale: 0.9 }}          animate={{ opacity: 1, scale: 1 }}          transition={{ duration: 0.45 }}        >          <h1 className="text-3xl font-bold text-white mb-8 text-center">Admin Login</h1>          <form onSubmit={handleLogin} className="space-y-6">            <div>              <label className="block text-sm font-medium text-gray-300 mb-2">Username</label>              <input                type="text"                value={username}                onChange={(event) => setUsername(event.target.value)}                required                className="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-red-500"                data-cursor="text"              />            </div>            <div>              <label className="block text-sm font-medium text-gray-300 mb-2">Password</label>              <input                type="password"                value={password}                onChange={(event) => setPassword(event.target.value)}                required                className="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-red-500"                data-cursor="text"              />            </div>            <motion.button              type="submit"              className="w-full px-4 py-3 bg-gradient-to-r from-red-600 to-pink-600 text-white rounded-lg font-semibold hover:shadow-lg transition-all duration-300"              whileHover={{ scale: 1.02 }}              whileTap={{ scale: 0.98 }}              data-cursor="pointer"            >              Enter Control Deck            </motion.button>          </form>          <p className="mt-6 text-center text-xs text-gray-400">Use admin / admin while Supabase wiring is offline.</p>        </motion.div>      </div>    );  }  return (    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-black to-red-900 py-16">      <div className="mx-auto flex w-full max-w-7xl flex-col gap-10 px-4 sm:px-6 lg:px-8">        <header className="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">          <div className="space-y-2">            <h1 className="text-4xl font-bold bg-gradient-to-r from-red-400 to-pink-400 bg-clip-text text-transparent">              Admin Dashboard            </h1>            {errorMessage ? <p className="text-sm text-red-300/80">{errorMessage}</p> : null}          </div>          <div className="flex flex-wrap items-center gap-3">            <motion.button              type="button"              onClick={() => void loadPortfolio()}              className="inline-flex items-center gap-2 rounded-xl border border-white/15 bg-white/10 px-4 py-2 text-sm font-semibold text-indigo-100 transition hover:bg-white/20 disabled:cursor-not-allowed disabled:opacity-60"              whileHover={{ scale: 1.03 }}              disabled={isLoading}            >              <ArrowPathIcon className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />              Refresh            </motion.button>            <motion.button              type="button"              onClick={handleLogout}              className="inline-flex items-center gap-2 rounded-xl border border-red-500/40 bg-red-500/10 px-4 py-2 text-sm font-semibold text-red-200 transition hover:bg-red-500/20"              whileHover={{ scale: 1.03 }}            >              Logout            </motion.button>          </div>        </header>        {portfolio ? (          <div className="grid gap-10 lg:grid-cols-[260px_1fr]">            <SectionNav active={selectedSection} onSelect={setSelectedSection} />            <div className="space-y-8">              {renderSection()}            </div>          </div>        ) : (          <div className="flex min-h-[320px] items-center justify-center rounded-3xl border border-white/10 bg-white/5">            <div className="flex items-center gap-3 text-indigo-100/70">              <Spinner />              <span>Loading portfolio data…</span>            </div>          </div>        )}      </div>      <AnimatePresence>        {toastMessage ? (          <motion.div            key="admin-toast"            variants={toastVariants}            initial="hidden"            animate="visible"            exit="hidden"            className="fixed bottom-8 right-8 z-40 rounded-2xl border border-indigo-400/50 bg-indigo-600/90 px-4 py-3 text-sm font-semibold text-white shadow-lg"          >            {toastMessage}          </motion.div>        ) : null}      </AnimatePresence>      <AnimatePresence>        {isModalOpen && formContext ? (          <motion.div            key="admin-modal"            className="fixed inset-0 z-50 flex items-center justify-center bg-slate-950/70 backdrop-blur"            initial={{ opacity: 0 }}            animate={{ opacity: 1 }}            exit={{ opacity: 0 }}          >            <motion.div              variants={formVariants}              initial="hidden"              animate="visible"              exit="hidden"              className="relative w-full max-w-2xl rounded-3xl border border-white/10 bg-slate-900/90 p-8 shadow-[0_30px_80px_rgba(15,23,42,0.65)]"            >              <div className="mb-6 flex items-start justify-between gap-4">                <div>                  <h2 className="text-2xl font-semibold text-white">{modalTitle}</h2>                  <p className="text-sm text-indigo-100/70">Update and press save to persist changes to the JSON dataset.</p>                </div>                <motion.button                  type="button"                  className="rounded-full border border-white/15 bg-white/10 p-2 text-indigo-100 hover:bg-white/20"                  whileHover={{ rotate: 90 }}                  onClick={closeModal}                >                  <XMarkIcon className="h-5 w-5" />                </motion.button>              </div>              {renderModalContent()}            </motion.div>          </motion.div>        ) : null}      </AnimatePresence>      <AnimatePresence>        {isSaving ? (          <motion.div            key="saving-overlay"            className="fixed inset-0 z-50 flex items-center justify-center bg-slate-950/80 backdrop-blur"            initial={{ opacity: 0 }}            animate={{ opacity: 1 }}            exit={{ opacity: 0 }}          >            <div className="flex items-center gap-3 rounded-2xl border border-indigo-400/40 bg-slate-900/80 px-6 py-4 text-indigo-100">              <Spinner />              <span>Saving changes…</span>            </div>          </motion.div>        ) : null}      </AnimatePresence>    </div>  );};export default AdminPage;